% This function uses userOptions to first generate masked source meshes for
% current time window and calculated group statistics across sliding time
% windows. Generates plots and saves all data RDMs and computed statistics
% as excel spreadsheet.
%
% Script can perform two kinds of group statistics:
%   Random Effects Analysis: This will generate an uncorrected t-map and a
%       corrected t-map thresholded based on cluster statistics. Each cluster
%       will have a mass and a corresponding p-value.
%
%   Fixed Effects Analysis: This will generate correlation values with
%       corresponding p values.

% Based on scripts by Su Li
% Written by Isma Zulfiqar 12-12

function ROI_slidingTimeWindow(sourceMeshes, userOptions, Models)

close all;
nMasks = numel(userOptions.maskNames);
allTimeWindows = userOptions.maskTimeWindows;
allMasks = userOptions.maskNames;
main_path = fullfile(userOptions.rootPath, 'Scripts');

nSubjects = userOptions.nSubjects;

modelNumber = userOptions.modelNumber;
modelName = Models(modelNumber).name;

for mask=1:nMasks
    thisMask = allMasks{mask};
    currentTimeWindow = allTimeWindows{mask};
    
    timeWindow=1;
    for time = currentTimeWindow(1):userOptions.temporalSearchlightResolution:currentTimeWindow(2)-userOptions.temporalSearchlightWidth
        
        % redefining index masks
        userOptions.maskNames = {thisMask};
        userOptions.maskTimeWindows = {[time time+userOptions.temporalSearchlightWidth]};
        tw{timeWindow} = num2str(userOptions.maskTimeWindows{1});
        
        % converting to data points equivalents
        userOptions = setMetadata_MEG(Models, userOptions);
        
        indexMasks = MEGMaskPreparation_source(userOptions);
        
        maskedMeshes = MEGDataMasking_source(sourceMeshes, indexMasks, userOptions.betaCorrespondence, userOptions);
        
        %% RDM calculation %%
        
        RDMs = constructRDMs(maskedMeshes, userOptions.betaCorrespondence, userOptions);
        allRDMs(mask,timeWindow,1:nSubjects) = RDMs;
        
        RDMs = averageRDMs_subjectSession(RDMs, 'session');
        aRDMs = averageRDMs_subjectSession(RDMs, 'subject');
        
        
        
        %% fixed effects analysis
        if strcmp(userOptions.groupStats,'FFX')
            disp('Testing (model, RoI) RDM pairs for significance of similarity...')
            
            clear p_randCondLabels r p_randDissims p_conv;
            
            % Name the RDMs being compared
            ts2=aRDMs.name;
            
            [r,p_randCondLabels,p_conv] = testRDMrelatedness_randomization_cw(Models(modelNumber).RDM, aRDMs.RDM);
            
            disp([ts2 ' ' tw{timeWindow}  ' ' num2str(p_conv) ' ' num2str(r)])
            cp_values(mask, timeWindow) = p_conv;
            p_values(mask, timeWindow) = p_randCondLabels;
            r_values(mask, timeWindow) = r;
            
            %% random effects analysis
        else
            disp('Testing (model, RoI) RDM pairs for significance of similarity...')
            
            modelRDM = Models(modelNumber).RDM;
            modelRDM_vec = vectorizeRDM(modelRDM);
            for subject=1:nSubjects
                [r(subject,1,timeWindow) p(subject,timeWindow)] = corr(vectorizeRDM(RDMs(1,subject).RDM)',modelRDM_vec','type','Spearman','rows','pairwise');
            end
            
        end
        timeWindow = timeWindow+1;
    end % for time
    
    % contd. RFX
    if strcmp(userOptions.groupStats,'RFX')
        % computing cluster based t statistic
        fpmin = 1;
        fpmax = 1;
        tpmin = 1;
        tpmax = size(r,3);
        perm_num = userOptions.significanceTestPermutations;
        test = 1; % test=1 for a 1 sample t-test, test=2 for a paired t-test
        pval = userOptions.primaryThreshold; %
        data1 = r;
        data2 = zeros(size(r));
        tmapFlag = userOptions.tmap;
        [clust_stats_pos, clust_stats_neg, base_map] = ...
            permutation_cluster_test_2dtfr_func(data1, ...
            data2,fpmin,fpmax,tpmin,tpmax,perm_num,test,pval,tmapFlag);
        
        if userOptions.tmap
            threshold = tinv(pval,(userOptions.nSubjects-1));
            thresh_map = ((base_map>= abs(threshold)) .* base_map) + ((base_map <= threshold) .* base_map);
            what_map = 't';
        else
            thresh_map = base_map;
            thresh_map(find(median(p)' > pval)) = 0;
            threshold = min(base_map(find(median(p)' < pval)))- 0.0001;
            what_map = 'r';
        end
        
        all_clusters_pos{mask} = clust_stats_pos;
        all_clusters_neg{mask} = clust_stats_neg;
        
        path = fullfile(userOptions.rootPath, 'Results', 'RandomEffects');
        gotoDir(path);
        fprintf(['Saving uncorrected ' what_map '-map... ']);
        xlswrite([modelName '-' thisMask '-uncorrected_' what_map], base_map);
        disp('Done!');
        fprintf(['Saving corrected ' what_map '-map... ']);
        xlswrite([modelName '-' thisMask '-corrected_' what_map], thresh_map);
        disp('Done!');
        fprintf('Saving r values for all subjects...')
        xlswrite([modelName '-' thisMask '-r'], squeeze(r));
        disp('Done!');
        
        path = fullfile(userOptions.rootPath, 'Results', 'RandomEffects', 'ClusterStats');
        gotoDir(path);
        fprintf('Saving cluster stats... ');
        xlswrite([modelName '-' thisMask '-cluster_stats-pos'], clust_stats_pos);
        % xlswrite([modelName '-' thisMask '-cluster_stats-neg'], clust_stats_neg);
        disp('Done!');
    end
    
    %% plots
    if strcmp(userOptions.groupStats,'RFX')
        
        subplot(2,1,2)
        hold all
        p1 = plot(thresh_map);
        set(gca, 'Xtick', 1:5:size(tw,2));
        xticklabel = tw(1:5:size(tw,2));
        set(gca, 'XtickLabel', strtok(xticklabel));
        show_threshold = zeros(size(thresh_map)) ;
        show_threshold(:,:) = abs(threshold);
        h = area(show_threshold, min(base_map), 'FaceColor', [1 1 1], 'EdgeColor', [0.9 0.9 0.9]);
        text(floor(size(tw,2)/2-2), floor(abs(threshold))+0.2,'threshold');
        title(['Corrected ' what_map '-map'])
        
        subplot(2,1,1)
        p2 = plot(base_map);
        set(gca, 'Xtick', 1:userOptions.temporalSearchlightResolution:size(tw,2));
        xticklabel = tw(1:userOptions.temporalSearchlightResolution:size(tw,2));
        set(gca, 'XtickLabel', strtok(xticklabel));
        title(['Uncorrected ' what_map '-map'])
        hold all
        
        
    else
        disp('Plotting r and p values: ');
        subplot(2,1,1)
        p1 = plot(r_values(mask,:));
        set(gca, 'Xtick', 1:userOptions.temporalSearchlightResolution:size(tw,2));
        xticklabel = tw(1:userOptions.temporalSearchlightResolution:size(tw,2));
        set(gca, 'XtickLabel', strtok(xticklabel));
        title('r values');
        hold all;
        
        subplot(2,1,2)
        p2 = plot(log(p_values(mask,:)));
        set(gca, 'Xtick', 1:userOptions.temporalSearchlightResolution:size(tw,2));
        xticklabel = tw(1:userOptions.temporalSearchlightResolution:size(tw,2));
        set(gca, 'XtickLabel', strtok(xticklabel));
        title('p values');
        hold all;
    end
    
    if mask<nMasks %% assumption: masks are named in pairs in projectOptions
        nextMask = allMasks{mask+1};
        if strcmp(strtok(nextMask,'-'),strtok(thisMask,'-'))
            hold all;
            check=true;
        else
            if check
                if mask>1
                    prevMask = allMasks{mask-1};
                    hleg = legend(prevMask, thisMask,'Location','Best');
                    set(p1,'Color','red')
                    set(p2,'Color','red')
                end
            end
            figure;
        end
    elseif mask==nMasks
        prevMask = allMasks{mask-1};
        hleg = legend(prevMask, thisMask,'Location','Best');
    end
    
    %% saving files
    fprintf('Saving all data RDMs... ');
    gotoDir(userOptions.rootPath, 'RDMs');
    save ([userOptions.analysisName '_dataRDMs_sliding_time_window'], 'allRDMs');
    disp('Done!');
    
    if strcmp(userOptions.groupStats,'FFX')
        path = fullfile(userOptions.rootPath, 'Results', 'FixedEffects');
        gotoDir(path);
        fprintf('Saving p and r values... ');
        xlswrite([modelName '-' thisMask '-p'], p_values);
        xlswrite([modelName '-' thisMask '-r'], r_values);
        disp('Done!');
    end
    gotoDir(main_path);
end % for:mask

userOptions.maskNames = allMasks;
userOptions.maskTimeWindows = allTimeWindows;

%% display results for RFX
for mask=1:nMasks
    thisMask = allMasks{mask};
    disp([thisMask ':']);
    if strcmp(userOptions.groupStats,'RFX')
        disp(['Total clusters = ' num2str(size(all_clusters_pos{mask},1))]);
        for i=1:size(all_clusters_pos{mask},1)
            disp(['Cluster mass: ' num2str(all_clusters_pos{mask}(i,1)) ' Corresponding p value:  ' num2str(all_clusters_pos{mask}(i,2))]);
        end
    else
        for i=1:size(tw,2)
            disp(['Time Window: ' tw{i}  ' r-value: ' num2str(p_values(mask,i)) ' p-value: ' num2str(r_values(mask,i))]);
        end
    end
    
end
